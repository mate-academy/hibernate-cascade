package core.basesyntax.dao.impl;

import core.basesyntax.AbstractTest;
import core.basesyntax.dao.CommentDao;
import core.basesyntax.dao.SmileDao;
import core.basesyntax.dao.UserDao;
import core.basesyntax.model.Comment;
import core.basesyntax.model.Smile;
import core.basesyntax.model.User;
import java.util.List;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class CommentDaoImplTest extends AbstractTest {
    private CommentDao commentDao;
    private SmileDao smileDao;
    private UserDao userDao;

    @Before
    public void before() {
        commentDao = new CommentDaoImpl(getSessionFactory());
        smileDao = new SmileDaoImpl(getSessionFactory());
        userDao = new UserDaoImpl(getSessionFactory());
    }

    @Test
    public void create_NoSmiles_Ok() {
        User user = new User();
        user.setUsername("test_user");
        userDao.create(user);

        Comment perfectComment = new Comment();
        perfectComment.setContent("This article is awesome!!!");
        perfectComment.setUser(user);

        Comment actual = commentDao.create(perfectComment);
        Assert.assertNotNull("Check you have implemented the `create` method " +
                "in the CommentDaoImpl class", actual);
        Assert.assertNotNull("ID for comment should be autogenerated", actual.getId());
    }

    @Test
    public void getCommentById_NoSmiles_Ok() {
        User user = new User();
        user.setUsername("test_user");
        userDao.create(user);

        Comment awesomeComment = new Comment();
        awesomeComment.setContent("This article is awesome!!!");
        awesomeComment.setUser(user);
        commentDao.create(awesomeComment);

        Comment actual = commentDao.get(awesomeComment.getId());
        Assert.assertNotNull(actual);
        Assert.assertNotNull(actual.getId());
        Assert.assertEquals("This article is awesome!!!", actual.getContent());
    }

    @Test
    public void addComment_WithNotExistedSmiles_Exception() {
        User user = new User();
        user.setUsername("test_user");
        userDao.create(user);

        Comment awesomeComment = new Comment();
        awesomeComment.setContent("This article is awesome!!!");
        awesomeComment.setUser(user);

        Smile funnySmile = new Smile("funny");
        Smile awesomeSmile = new Smile("awesome");

        awesomeComment.setSmiles(List.of(funnySmile, awesomeSmile));
        try {
            commentDao.create(awesomeComment);
        } catch (RuntimeException e) {
            return;
        }
        Assert.fail("You should not create smiles when saving a comment. " +
                "Use only smiles stored in DB. Check your cascade setting");
    }

    @Test
    public void addComment_WithExistedSmiles_Ok() {
        User user = new User();
        user.setUsername("test_user");
        userDao.create(user);

        Smile funnySmile = new Smile("funny");
        Smile awesomeSmile = new Smile("awesome");
        smileDao.create(funnySmile);
        smileDao.create(awesomeSmile);

        Comment perfectComment = new Comment();
        perfectComment.setContent("This article is awesome!!!");
        perfectComment.setUser(user);
        perfectComment.setSmiles(List.of(funnySmile, awesomeSmile));
        commentDao.create(perfectComment);

        Assert.assertNotNull(perfectComment.getSmiles());
        Assert.assertFalse(perfectComment.getSmiles().isEmpty());
        Assert.assertEquals(2, perfectComment.getSmiles().size());
    }

    @Override
    protected Class<?>[] entities() {
        return new Class[]{Comment.class, Smile.class, User.class};
    }
}
